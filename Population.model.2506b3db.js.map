{"version":3,"sources":["View/Settings.view.js","utils/getRandomNumber.util.js","Models/Player.model.js","Models/DNA.model.js","Models/Ball.model.js","Models/Population.model.js"],"names":["canvas","document","getElementById","width","window","innerWidth","height","innerHeight","Settings","gameContainer","canvasWidth","canvasHeight","ctx","getContext","getRandomNumber","len","Math","floor","random","Player","dna","newGenes","ball","id","lifeSpan","x","creatingGenes","y","x_step","color","changeColor","dead","index","lifes","score","ballHit","fitness","distanceFromBall","deathPenalty","abs","ROOF","y_speed","ballRadius","RIGHT_WALL","x_speed","LEFT_WALL","GROUND","calcFitness","beginPath","rect","fill","closePath","fillStyle","moveTo","lineTo","strokeStyle","stroke","genes","left","right","red","green","blue","key","drawPlayer","start","player_collision","walls_collision","think","DNA","length","Array","i","_applyMutate","partner","child","midpoint","rate","Ball","mass","arc","PI","draw","movement","Population","total","matingPool","avgFitness","bestPlayer","worstFitness","generation","mutationRatio","mostBallHit","deadPopulation","population","populationHistory","_calculateFitness","_getMaxFitness","_getWorstFitness","_getAvgFitnessPerGen","_setMostBallHit","_nextGeneration","map","player","splice","push","console","log","Generation","Most_Ball_Hit","Best_Fitness","Worst_Fitness","Average_Fitness","Mutation_Ratio","parentA","_acceptReject","parentB","parentAGenes","getDNA","parentBGenes","childDNA","crossOver","_mutate","n","j","fitnessSum","escapeLoop","r"],"mappings":";;;;;;AAAA,IAAMA,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAf;AIAA,AFAA,AGAA,ALCAF,ACDO,IAAMc,EDCP,CAACX,KAAP,GAAeC,ICDa,EDCP,CAACC,ACDS,SAAlBS,CDCb,cCD+B,CAACC,GAAD;ADE/Bf,ACF+B,MDEzB,CAACM,ECFiCU,IDExC,ACF4C,CAACC,EDE7Bb,GCFwB,CAAWY,EDE7B,CAACT,CCFgC,CAACW,MAAL,GDEnD,ECFmEH,GAA3B,CAAT;ACC/B,AGAA,ALEO,ACHwB,CAAxB,GDGMP,QAAQ,GAAG;AACtBC,EAAAA,aAAa,EAAER,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CADO;AKDxB,ALGEQ,EAAAA,WAAW,EAAEV,MAAM,CAACG,KAFE;AAGtBQ,EAAAA,YAAY,EAAEX,MAAM,CAACM,MAHC;AKAxB,ALIEM,EAAAA,EGPWyD,CHOR,EAAErE,MAAM,CAACa,UAAP,CAAkB,IAAlB;AGNL,AHEsB,CAAjB,cGFOyD,MAAZ,EAAoB;AAAA,ICChBQ;AACJ,kBAAc;AAAA,ADDZ,IDCIpE,ICDA4D,MAAJ,EAAY,EDCsB9D,mBAA9BE;ACAF,IDAeC,OCAV8C,KAAL,GAAa,ADAmBjD,ICAf+D,KAAJ,CAAUD,MAAV,CAAb,EDAe3D;AECjB,ADAC,KAFD,ICEKc,CAAL,CDAO,ECAE,GAAT;AACA,ADAE,IDDAN,KECGQ,CAAL,CDAO8B,ECAEjD,GDAP,GAAa,EAAb,WCAgBG,YAAT,GAAwB,CAAjC;AACA,ADAC,ADDH,SECOiC,OAAL,EFDUxB,CECK,CAAf,CFDF,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AEE/B,ADAD,ADFgC,SEE1BmB,OAAL,GAAe,CAAC,EAAhB;AACA,ICHE2C,KDGGvD,KAAL,GAAa,EAAb;AACA,AFHA,AGAF,SDGOkD,AFHAxD,EAAL,EEGA,CFHU,EEGE,KAAKmB,GCHL,ODGA,GAAkB,KAAKA,UAAvB,GAAoC,AFHtB,CAAhB,CAAV,GEGqDA,UAArD;AACA,AFHA,AGDY,SDIPA,AFHAlB,QAAL,EEGA,CFHgB,EEGE,EAAlB,AFHA;AEID,kCDFaA,UAAU;AACtB,ADFA,AGDA,QHCIH,CGDCgE,EFGA,GEHL,CFGSb,CAAC,ADFV,CGDa,CHCC,CCED,CAAb,AEHA,EFGgBA,CAAC,GAAGhD,QAApB,EAA8BgD,CAAC,EAA/B,EAAmC;AACjC,ADFA,AGAF,SAAKc,EHAElE,ECEAqC,CDFL,GAAWrC,CCEX,CAAWoD,AEFb,CFEE,ADFA,EGAgB,EFEA,AEFlB,KFEuBC,YAAL,EAAhB;AACD,ADFC,AGAF,SAAKc,EHAElE,QAAL,AGAF,GHAkB,AGAA,CAAlB,GHAE;ACGH,ADFG,AGAF,SAAKmE,EHAE/D,CAAL,GAAS,GAAT,CGAF,GAAkB,KDEb;AAAA,AFDJ,AGDmBW,KHHpB,CGGoBA,IDGZxB,CFFD,EECF,ACFsB,EAAE,CDGbJ,kBADX,CACGI,GADH;AAELA,AFFE,AGFgB,KAAlB,CDIAA,GAAG,CAACoC,CFFG5B,GAAL,GAAWA,EEEb,CFFE;AEGFR,AFFE,AGFF,MDIAA,GAAG,ACJE6E,CDIDT,CFFG5D,EEEP,CAAQ,AFFN,CAASM,IEEED,CAAb,CCJA,CDIgB,ECJI,CAApB,EDIqBE,CAArB,AFFE,CAAuB,CEED,ADDhB+C,IDDsBlD,CEEDkB,IDDZ,GDDf,GEEF,EAAyC,CAAzC,EAA4C1B,IAAI,CAACiE,EAAL,GAAU,CAAtD;AACArE,ADDA,ADDE,AGFF,MDIAA,GAAG,ACJE8E,CDIDtC,ADDAuB,CDDGtD,ICCE,GAAG,CCCZ,AFFE,AGFF,GDIgB,ADDAgD,ADDE,AGFA,CAAlB,EFGY,CAAQ,CCCCxC,AFFnB,ICCuB4B,CCCzB,IDDoB,CAAWa,MAAnB,CAAZ;ACEA1D,ADDA,ADDE,AGFF,MDIAA,GAAG,ACJE+E,CDIDzC,ADDA0B,CDDGnD,CAAL,EEEF,CFFWT,GCCC,CDDG,CAACC,CCCDD,CEHf,GFGmB,ADDR,AGFU,CFGDC,ADDED,GGFtB,CHE0B,CCCX,ADDYE,CCCDF,IAAI,CAACE,ADDT,KAAgBR,CCCZ,KAAgB,KAAK+C,ADDpC,CAAT,ICCwC,CAAWa,MAAtC,CAAf;ACEA1D,AFFC,AGFD,MDIAA,GAAG,ACJEgF,CDIDzC,SAAJ,CCJA,GAAmB,CAAnB;ADKD,ADDC,AEFA,SAAK0C,EFEA,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,AEFjB,GFEoB,AEFE,EAAtB,GFEyBf,KAAL,CAAWa,MAA/B,EAAuCE,CAAC,EAAxC,EAA4C;AAC1C,ADDF,AGDA,SHCK7C,AGDAmE,CHCL,ECCMtB,CAAC,ADDEhE,GCCCoE,GEFV,GAAkB,EFEhB,AEFF,EFEoBD,KAAK,CAAClB,ADDR9C,KCCE,CAAY6D,CAAZ,IAAiB,CDD5B,GAAwB,CCCSf,CDD1C,ICCqC,CAAWe,CAAX,CAAjB,CAAlB,KACK,IAAIA,CAAC,GAAGI,QAAR,EAAkBD,KAAK,CAAClB,KAAN,CAAYe,CAAZ,IAAiBE,OAAO,CAACjB,KAAR,CAAce,CAAd,CAAjB;AACxB,ADFD,AGAA,SHAK5C,AGAAmE,MHAL,GAAc,EAAd,MGAA,GAAyB,EAAzB;AHCA,SAAKzF,MAAL,GAAc,EAAd,WECS;AACT,ADAA,ADDA,AGDA,SHCKH,AGDA,EDEAsB,CAAL,CDAOkD,AEFEH,CHCT,AGDU,EDEA,CFDG9D,AGDA,CFEb,AEFA,EAAgB8D,CDED5B,ACFE,GAAG,IDEpB,AFDwB,CGDCyC,EHCE,CAA3B,EGDA,EAAgCb,CAAC,EAAjC,EAAqC;ADGrC,ADAD,ADDC,AGDE,SHCG3C,EECAF,ACFEmE,CDEP,EFDA,EECU,CFDG,IECErD,ACFb,CHCgBX,AGDA0C,CAAhB,IAAqB,CDEvB,GCF2BrD,EHCd,EAAb,WGDuB,CAAW,IAAIkD,QAAJ,EAAX,EAAsB,KAAtB,EAA6B,IAAIS,aAAJ,EAA7B,CAArB;ADGH,AFAC,AGFC,SHEI/C,IAAL,GAAY,KAAZ;AACA,AGFD,SHEMT,IAAL,GAAYA,IAAZ;AACA,SAAKU,KAAL,GAAa,CAAb,iBCDa;AACb,ADCA,SAAKC,ICDEjB,CDCP,GCDW,ADCE,CCDDC,ADCZ,KCDO,CAAWD,ICAZ,ADAgB,CAACE,MAAL,KAAgB,CAA3B,CAAP;ACCA,ADAD,ADCC,SAAKgB,EEDAgD,GFCL,CEDA,EFCa,CAAb;AEAA,AFCA,SAAK/C,EEDAgD,KFCL,GEDA,AFCe,CAAf,sBGJoB;ADIrB,AFCC,AGJA,SHI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","file":"Population.model.2506b3db.js","sourceRoot":"..","sourcesContent":["const canvas = document.getElementById('gameContainer');\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\nexport const Settings = {\n  gameContainer: document.getElementById('gameContainer'),\n  canvasWidth: canvas.width,\n  canvasHeight: canvas.height,\n  ctx: canvas.getContext('2d'),\n};\n","export const getRandomNumber = (len) => Math.floor(Math.random() * len);\n","import { Settings } from '../View/Settings.view';\nimport { getRandomNumber } from '../utils/getRandomNumber.util';\n\nconst { canvasWidth, canvasHeight } = Settings;\nclass Player {\n  constructor(dna, newGenes, ball) {\n    this.id = getRandomNumber(1);\n    this.lifeSpan = 2900;\n    if (newGenes) {\n      this.dna = dna;\n      this.newGenes = true;\n      this.x = 400;\n    } else {\n      this.dna = dna;\n      this.dna.creatingGenes(this.lifeSpan);\n      this.newGenes = false;\n      this.x = Math.floor(Math.random() * canvasWidth);\n    }\n\n    this.y = Settings.canvasHeight - 25;\n    this.x_step = 25;\n    this.height = 15;\n    this.width = canvasWidth / 6;\n    this.color = this.changeColor();\n\n    this.dead = false;\n    this.ball = ball;\n    this.index = 0;\n    this.lifes = 1;\n    this.score = 0;\n    this.ballHit = 0;\n    this.fitness = 0;\n    this.distanceFromBall = 0;\n    this.deathPenalty = 0;\n  }\n\n  calcFitness() {\n    this.distanceFromBall = Math.abs(this.distanceFromBall);\n    this.fitness =\n      (this.score * this.ballHit) / this.deathPenalty + this.distanceFromBall;\n  }\n\n  walls_collision() {\n    const ROOF = this.ball.y + this.ball.y_speed - this.ball.ballRadius < 0;\n    const RIGHT_WALL =\n      this.ball.x + this.ball.x_speed + this.ball.ballRadius > canvasWidth;\n    const LEFT_WALL =\n      this.ball.x + this.ball.x_speed - this.ball.ballRadius < 0;\n    const GROUND =\n      this.ball.y + this.ball.y_speed + this.ball.ballRadius > canvasHeight;\n\n    switch (true) {\n      case ROOF:\n        this.ball.y_speed = -this.ball.y_speed;\n        break;\n\n      case LEFT_WALL:\n        this.ball.x_speed = -this.ball.x_speed;\n        break;\n\n      case RIGHT_WALL:\n        this.ball.x_speed = -this.ball.x_speed;\n        break;\n\n      case GROUND:\n        this.ball.y_speed = -this.ball.y_speed;\n        this.lifes -= 1;\n        if (this.lifes === 0) {\n          this.dead = true;\n          this.calcFitness();\n        }\n    }\n  }\n\n  player_collision() {\n    if (\n      this.ball.y + this.ball.y_speed + this.ball.ballRadius >=\n        this.y + this.height &&\n      this.ball.x + this.ball.ballRadius < this.x + this.width &&\n      this.x < this.ball.x + this.ball.ballRadius\n    ) {\n      this.ball.y_speed = -this.ball.y_speed;\n      this.ballHit++;\n    }\n  }\n\n  drawPlayer() {\n    const { ctx } = Settings;\n    ctx.beginPath();\n    ctx.rect(this.x, canvasHeight - this.height, this.width, this.height);\n    ctx.fill();\n    ctx.closePath();\n    ctx.fillStyle = this.color;\n    this.ball.color = this.color;\n  }\n\n  drawBallLine() {\n    const { ctx } = Settings;\n    ctx.moveTo(this.x + this.width / 2, this.y + this.height);\n    ctx.lineTo(this.ball.x, this.ball.y);\n    ctx.strokeStyle = this.color;\n    ctx.stroke();\n  }\n\n  think() {\n    this.dna.genes[this.index] == 0 ? this.left() : this.right();\n  }\n\n  left() {\n    this.x > 0 ? (this.x -= this.x_step) : [];\n  }\n\n  right() {\n    this.x + this.width < canvasWidth ? (this.x += this.x_step) : [];\n  }\n\n  changeColor() {\n    let red = Math.floor(Math.random() * 3) * 127;\n    let green = Math.floor(Math.random() * 3) * 127;\n    let blue = Math.floor(Math.random() * 3) * 127;\n    return `rgba(${red}, ${green}, ${blue}, ${Math.random()}`;\n  }\n\n  control({ key }) {\n    switch (key) {\n      case 'a':\n        this.left();\n        break;\n\n      case 'd':\n        this.right();\n        break;\n    }\n  }\n\n  getDNA() {\n    return this.dna;\n  }\n\n  start() {\n    if (!this.newGenes) this.dna.creatingGenes(this.lifeSpan);\n    this.drawPlayer();\n    //this.drawBallLine();\n    this.ball.start();\n    this.player_collision();\n    this.walls_collision();\n    this.think();\n    this.score++;\n    this.lifeSpan--;\n    this.index++;\n  }\n}\n\nexport default Player;\n","export class DNA {\n  constructor(length) {\n    if (length) {\n      this.genes = new Array(length);\n    } else {\n      this.genes = [];\n    }\n  }\n\n  creatingGenes(lifeSpan) {\n    for (let i = 0; i < lifeSpan; i++) {\n      this.genes[i] = this._applyMutate();\n    }\n  }\n\n  crossOver(partner) {\n    let child = new DNA(this.genes.length);\n    let midpoint = Math.floor(Math.random() * this.genes.length);\n\n    for (let i = 0; i < this.genes.length; i++) {\n      if (i > midpoint) child.genes[i] = this.genes[i];\n      else if (i < midpoint) child.genes[i] = partner.genes[i];\n    }\n    return child;\n  }\n\n  _applyMutate() {\n    return Math.floor(Math.random() * 2);\n  }\n\n  _mutate(rate) {\n    for (let i = 0; i < this.genes.length; i++) {\n      if (Math.random() < rate) {\n        this.genes[i] = this._applyMutate();\n      }\n    }\n  }\n}\n","import { Settings } from '../View/Settings.view';\n\nclass Ball {\n  constructor() {\n    this.x = 500;\n    this.y = Settings.canvasHeight / 2;\n    this.x_speed = 2;\n    this.y_speed = -15;\n    this.color = '';\n    this.mass = this.ballRadius * this.ballRadius * this.ballRadius;\n    this.ballRadius = 10;\n  }\n\n  draw() {\n    const { ctx } = Settings;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.ballRadius, 0, Math.PI * 2);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  movement() {\n    this.x += this.x_speed;\n    this.y += this.y_speed;\n  }\n\n  start() {\n    this.draw();\n    this.movement();\n  }\n}\n\nexport default Ball;\n","import Player from './Player.model';\nimport { DNA } from './DNA.model';\nimport Ball from './Ball.model';\nimport { getRandomNumber } from '../utils/getRandomNumber.util';\n\nclass Population {\n  constructor() {\n    this.total = 100;\n\n    this.matingPool = [];\n    this.avgFitness = 0;\n    this.bestPlayer = { fitness: 0 };\n    this.worstFitness = 0;\n    this.generation = 1;\n    this.mutationRatio = 0.05;\n    this.mostBallHit = 0;\n\n    this.deadPopulation = [];\n    this.population = [];\n\n    this.populationHistory = [];\n    for (let i = 0; i < this.total; i++) {\n      this.population[i] = new Player(new DNA(), false, new Ball());\n    }\n  }\n\n  calculatePopulation() {\n    this._calculateFitness();\n    this._getMaxFitness();\n    this._getWorstFitness();\n    this._getAvgFitnessPerGen();\n    this._setMostBallHit();\n    this._nextGeneration();\n  }\n\n  populationLearning() {\n    if (this.population) {\n      this.population.map((player, i) => {\n        let deathPenalty = this.population.length;\n        player.start();\n        if (player.dead === true) {\n          player.deathPenalty = deathPenalty;\n          this.population.splice(i, 1);\n          this.deadPopulation.push(player);\n        }\n      });\n    }\n  }\n\n  fillHistory() {\n    console.log(this.populationHistory);\n    this.populationHistory.push({\n      Generation: this.generation,\n      Most_Ball_Hit: this.mostBallHit,\n      Best_Fitness: this.bestPlayer.fitness,\n      Worst_Fitness: this.worstFitness,\n      Average_Fitness: this.avgFitness,\n      Mutation_Ratio: this.mutationRatio,\n    });\n  }\n\n  _nextGeneration() {\n    console.log('Next generation');\n    this.generation++;\n    for (let i = 0; i < this.total; i++) {\n      let parentA = this._acceptReject();\n      let parentB = this._acceptReject();\n      if (!parentA) parentA = this.deadPopulation[getRandomNumber(this.total)];\n      if (!parentB) parentB = this.deadPopulation[getRandomNumber(this.total)];\n      const parentAGenes = parentA.getDNA();\n      const parentBGenes = parentB.getDNA();\n\n      const childDNA = parentAGenes.crossOver(parentBGenes);\n      childDNA._mutate(this.mutationRatio);\n      this.population[i] = new Player(childDNA, true, new Ball());\n    }\n  }\n\n  pickMatingPool() {\n    this.matingPool = [];\n    for (let i = 0; i < this.total; i++) {\n      let n = this.deadPopulation[i].fitness;\n      for (let j = 0; j < n; j++) {\n        this.matingPool.push(this.deadPopulation[j]);\n      }\n    }\n  }\n\n  _getMaxFitness() {\n    for (let player of this.deadPopulation) {\n      if (player.fitness > this.bestPlayer.fitness) {\n        this.bestPlayer = player;\n      }\n    }\n  }\n\n  _getAvgFitnessPerGen() {\n    let fitnessSum = 0;\n    for (let i = 0; i < this.deadPopulation.length; i++) {\n      fitnessSum += this.deadPopulation[i].fitness;\n    }\n    this.avgFitness = fitnessSum / this.deadPopulation.length;\n  }\n\n  _getWorstFitness() {\n    let worstFitness = 0;\n\n    for (let i = 0; i < this.deadPopulation.length; i++) {\n      if (worstFitness < this.deadPopulation[i].fitness)\n        this.worstFitness = this.deadPopulation[i].fitness;\n    }\n  }\n\n  _calculateFitness() {\n    for (let player of this.deadPopulation) {\n      player.calcFitness();\n    }\n  }\n\n  _acceptReject() {\n    let escapeLoop = 0;\n    while (true) {\n      const partner = this.deadPopulation[getRandomNumber(this.total)];\n      const r = Math.floor(Math.random() * this.bestPlayer.fitness);\n      if (r < partner.fitness) {\n        return partner;\n      }\n      escapeLoop++;\n      if (escapeLoop > 5000) {\n        return;\n      }\n    }\n  }\n\n  _setMostBallHit() {\n    for (let player of this.deadPopulation) {\n      if (player.ballHit > this.mostBallHit) {\n        this.mostBallHit = player.ballHit;\n      }\n    }\n  }\n}\n\nexport default Population;\n"]}
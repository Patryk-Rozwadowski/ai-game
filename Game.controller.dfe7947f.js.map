{"version":3,"sources":["View/Settings.view.js","utils/getRandomNumber.util.js","Models/Player.model.js","Models/DNA.model.js","Models/Ball.model.js","Models/Population.model.js","View/GameInfo.view.js","utils/showBtn.util.js","Controller/Game.controller.js"],"names":["canvas","document","getElementById","width","window","innerWidth","height","innerHeight","Settings","gameContainer","canvasWidth","canvasHeight","ctx","getContext","getRandomNumber","len","Math","floor","random","Player","dna","newGenes","ball","id","lifeSpan","x","creatingGenes","y","x_step","color","changeColor","dead","index","lifes","score","ballHit","fitness","distanceFromBall","deathPenalty","abs","ROOF","y_speed","ballRadius","RIGHT_WALL","x_speed","LEFT_WALL","GROUND","calcFitness","beginPath","rect","fill","closePath","fillStyle","moveTo","lineTo","strokeStyle","stroke","genes","left","right","red","green","blue","key","drawPlayer","start","player_collision","walls_collision","think","DNA","length","Array","i","applyMutate","partner","child","midpoint","rate","Ball","mass","arc","PI","draw","movement","Population","total","matingPool","avgFitness","bestPlayer","worstFitness","generation","mutationRatio","mostBallHit","deadPopulation","population","player","console","log","parentA","acceptReject","parentB","parentAGenes","getDNA","parentBGenes","childDNA","crossOver","mutate","n","j","push","escapeLoop","r","fitnessSum","populationInformation","WriteGameInfo","innerHTML","showElement","elements","classList","remove","add","hideElements","csvButton","startGameBtn","pauseGameBtn","resumeGameBtn","controlButtons","Game","populationHistory","game","gameStarted","learningSpeed","interval","setInterval","isPaused","clearRect","whenPopulationIsNotEmpty","whenPopulationIsEmpty","map","splice","calculateFitness","getMaxFitness","getWorstFitness","getAvgFitnessPerGen","setMostBallHit","nextGeneration","Generation","Most_Ball_Hit","Best_Fitness","Worst_Fitness","Average_Fitness","Mutation_Ratio","time","Date","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","csvRows","Object","keys","join","csvCols","record","csvContent","a","createElement","href","URL","createObjectURL","Blob","type","setAttribute","getProgressTimeAndDate","click","addEventListener","controlPanel","stop","resume","saveToCsv"],"mappings":"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","file":"Game.controller.dfe7947f.js","sourceRoot":"..","sourcesContent":["\r\nconst canvas = document.getElementById('gameContainer');\r\ncanvas.width = window.innerWidth;\r\ncanvas.height = window.innerHeight;\r\nexport const Settings = {\r\n  gameContainer: document.getElementById('gameContainer'),\r\n  canvasWidth: canvas.width,\r\n  canvasHeight: canvas.height,\r\n  ctx: canvas.getContext('2d')\r\n};","export const getRandomNumber = len => Math.floor(Math.random() * len);","import {Settings} from '../View/Settings.view';\r\nimport {getRandomNumber} from '../utils/getRandomNumber.util';\r\n\r\nconst {canvasWidth, canvasHeight} = Settings;\r\nclass Player {\r\n  constructor(dna, newGenes, ball) {\r\n\r\n    this.id = getRandomNumber(1);\r\n    this.lifeSpan = 2900;\r\n    if (newGenes) {\r\n      this.dna = dna;\r\n      this.newGenes = true;\r\n      this.x = 400;\r\n    } else {\r\n      this.dna = dna;\r\n      this.dna.creatingGenes(this.lifeSpan);\r\n      this.newGenes = false;\r\n      this.x = Math.floor(Math.random() * canvasWidth);\r\n    }\r\n\r\n    this.y = Settings.canvasHeight - 25;\r\n    this.x_step = 25;\r\n    this.height = 15;\r\n    this.width = canvasWidth / 6;\r\n    this.color = this.changeColor();\r\n\r\n    this.dead = false;\r\n    this.ball = ball;\r\n    this.index = 0;\r\n    this.lifes = 1;\r\n    this.score = 0;\r\n    this.ballHit = 0;\r\n    this.fitness = 0;\r\n    this.distanceFromBall = 0;\r\n    this.deathPenalty = 0;\r\n  }\r\n\r\n  calcFitness() {\r\n    this.distanceFromBall = Math.abs(this.distanceFromBall);\r\n    this.fitness = (this.score * this.ballHit) / this.deathPenalty + this.distanceFromBall;\r\n  }\r\n\r\n  walls_collision() {\r\n    const ROOF = this.ball.y + this.ball.y_speed - this.ball.ballRadius < 0;\r\n    const RIGHT_WALL = this.ball.x + this.ball.x_speed + this.ball.ballRadius > canvasWidth;\r\n    const LEFT_WALL = this.ball.x + this.ball.x_speed - this.ball.ballRadius < 0;\r\n    const GROUND = this.ball.y + this.ball.y_speed + this.ball.ballRadius > canvasHeight;\r\n\r\n    switch (true) {\r\n      case ROOF:\r\n        this.ball.y_speed = -this.ball.y_speed;\r\n        break;\r\n\r\n      case LEFT_WALL:\r\n        this.ball.x_speed = -this.ball.x_speed;\r\n        break;\r\n\r\n      case RIGHT_WALL:\r\n        this.ball.x_speed = -this.ball.x_speed;\r\n        break;\r\n\r\n      case GROUND:\r\n        this.ball.y_speed = -this.ball.y_speed;\r\n        this.lifes -= 1;\r\n        if (this.lifes === 0) {\r\n          this.dead = true;\r\n          this.calcFitness();\r\n        }\r\n    }\r\n  }\r\n\r\n  player_collision() {\r\n    if (this.ball.y + this.ball.y_speed + this.ball.ballRadius >= this.y + this.height\r\n        && this.ball.x + this.ball.ballRadius < this.x + this.width\r\n        && this.x < this.ball.x + this.ball.ballRadius) {\r\n      this.ball.y_speed = -this.ball.y_speed;\r\n      this.ballHit++;\r\n    }\r\n  }\r\n\r\n  drawPlayer() {\r\n    const {ctx} = Settings;\r\n    ctx.beginPath();\r\n    ctx.rect(this.x, canvasHeight - this.height, this.width, this.height);\r\n    ctx.fill();\r\n    ctx.closePath();\r\n    ctx.fillStyle = this.color;\r\n    this.ball.color = this.color;\r\n  }\r\n\r\n  drawBallLine() {\r\n    const {ctx} = Settings;\r\n    ctx.moveTo(this.x + this.width / 2, this.y + this.height);\r\n    ctx.lineTo(this.ball.x, this.ball.y);\r\n    ctx.strokeStyle = this.color;\r\n    ctx.stroke();\r\n  }\r\n\r\n  think() {\r\n    this.dna.genes[this.index] == 0 ? this.left() : this.right();\r\n  }\r\n\r\n  left() {\r\n    this.x > 0 ? this.x -= this.x_step : [];\r\n  }\r\n\r\n  right() {\r\n    this.x + this.width < canvasWidth ? this.x += this.x_step : [];\r\n  }\r\n\r\n  changeColor() {\r\n    let red = Math.floor(Math.random() * 3) * 127;\r\n    let green = Math.floor(Math.random() * 3) * 127;\r\n    let blue = Math.floor(Math.random() * 3) * 127;\r\n    return `rgba(${red}, ${green}, ${blue}, ${Math.random()}`;\r\n  }\r\n\r\n  control({key}) {\r\n    switch (key) {\r\n      case 'a':\r\n        this.left();\r\n        break;\r\n\r\n      case 'd':\r\n        this.right();\r\n        break;\r\n    }\r\n  }\r\n\r\n  getDNA() {\r\n    return this.dna;\r\n  }\r\n\r\n  start() {\r\n    if (!this.newGenes) this.dna.creatingGenes(this.lifeSpan);\r\n    this.drawPlayer();\r\n    //this.drawBallLine();\r\n    this.ball.start();\r\n    this.player_collision();\r\n    this.walls_collision();\r\n    this.think();\r\n    this.score++;\r\n    this.lifeSpan--;\r\n    this.index++;\r\n  }\r\n}\r\n\r\nexport default Player;","export class DNA {\r\n  constructor(length) {\r\n    if (length) {\r\n      this.genes = new Array(length);\r\n    } else {\r\n      this.genes = [];\r\n    }\r\n  }\r\n\r\n  creatingGenes(lifeSpan) {\r\n    for (let i = 0; i < lifeSpan; i++) {\r\n      this.genes[i] = this.applyMutate();\r\n    }\r\n  }\r\n\r\n  crossOver(partner) {\r\n    let child = new DNA(this.genes.length);\r\n    let midpoint = Math.floor(Math.random() * this.genes.length);\r\n\r\n    for (let i = 0; i < this.genes.length; i++) {\r\n      if (i > midpoint) child.genes[i] = this.genes[i];\r\n      else if (i < midpoint) child.genes[i] = partner.genes[i];\r\n    }\r\n    return child;\r\n  }\r\n\r\n  applyMutate() {\r\n    return Math.floor(Math.random() * 2);\r\n  }\r\n\r\n  mutate(rate) {\r\n    for (let i = 0; i < this.genes.length; i++) {\r\n      if (Math.random() < rate) {\r\n        this.genes[i] = this.applyMutate();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {Settings} from '../View/Settings.view';\r\n\r\nclass Ball {\r\n  constructor() {\r\n    this.x = 500;\r\n    this.y = Settings.canvasHeight / 2;\r\n    this.x_speed = 2;\r\n    this.y_speed = -15;\r\n    this.color = '';\r\n    this.mass = this.ballRadius * this.ballRadius * this.ballRadius;\r\n    this.ballRadius = 10;\r\n  }\r\n\r\n  draw() {\r\n    const {ctx} = Settings;\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y, this.ballRadius, 0, Math.PI * 2);\r\n    ctx.fillStyle = this.color;\r\n    ctx.fill();\r\n    ctx.closePath();\r\n  }\r\n\r\n  movement() {\r\n    this.x += this.x_speed;\r\n    this.y += this.y_speed;\r\n  }\r\n\r\n  start() {\r\n    this.draw();\r\n    this.movement();\r\n  }\r\n}\r\n\r\nexport default Ball;","import Player from './Player.model';\r\nimport {DNA} from './DNA.model';\r\nimport Ball from './Ball.model';\r\nimport {getRandomNumber} from '../utils/getRandomNumber.util';\r\n\r\nclass Population {\r\n  constructor() {\r\n    this.total = 100;\r\n\r\n    this.matingPool = [];\r\n    this.avgFitness = 0;\r\n    this.bestPlayer = {fitness: 0};\r\n    this.worstFitness = 0;\r\n    this.generation = 1;\r\n    this.mutationRatio = 0.05;\r\n    this.mostBallHit = 0;\r\n\r\n    this.deadPopulation = [];\r\n    this.population = [];\r\n    for (let i = 0; i < this.total; i++) {\r\n      this.population[i] = new Player(new DNA(), false, new Ball());\r\n    }\r\n  }\r\n\r\n  setMostBallHit() {\r\n    for (let player of this.deadPopulation) {\r\n      if (player.ballHit > this.mostBallHit) {\r\n        this.mostBallHit = player.ballHit;\r\n      }\r\n    }\r\n  }\r\n\r\n  nextGeneration() {\r\n    console.log('Next generation');\r\n    this.generation++;\r\n    for (let i = 0; i < this.total; i++) {\r\n      let parentA = this.acceptReject();\r\n      let parentB = this.acceptReject();\r\n      if(!parentA) parentA = this.deadPopulation[getRandomNumber(this.total)];\r\n      if(!parentB) parentB = this.deadPopulation[getRandomNumber(this.total)];\r\n      const parentAGenes = parentA.getDNA();\r\n      const parentBGenes = parentB.getDNA();\r\n\r\n\r\n      const childDNA = parentAGenes.crossOver(parentBGenes);\r\n      childDNA.mutate(this.mutationRatio);\r\n      this.population[i] = new Player(childDNA, true, new Ball());\r\n    }\r\n  }\r\n\r\n  pickMatingPool() {\r\n    this.matingPool = [];\r\n    for (let i = 0; i < this.total; i++) {\r\n      let n = this.deadPopulation[i].fitness;\r\n      for (let j = 0; j < n; j++) {\r\n        this.matingPool.push(this.deadPopulation[j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  acceptReject() {\r\n    let escapeLoop = 0;\r\n    while (true) {\r\n      const partner = this.deadPopulation[getRandomNumber(this.total)];\r\n      const r = Math.floor(Math.random() * this.bestPlayer.fitness); //getRandomNumber(this.bestPlayer.fitness);\r\n      if (r < partner.fitness) {\r\n        return partner;\r\n      }\r\n      escapeLoop++;\r\n      if (escapeLoop > 5000) { return;}\r\n    }\r\n  }\r\n\r\n  getMaxFitness() {\r\n    for (let player of this.deadPopulation) {\r\n      if (player.fitness > this.bestPlayer.fitness) {\r\n        this.bestPlayer = player;\r\n      }\r\n    }\r\n  }\r\n\r\n  getAvgFitnessPerGen() {\r\n    let fitnessSum = 0;\r\n    for(let i = 0; i < this.deadPopulation.length; i++) {\r\n      fitnessSum += this.deadPopulation[i].fitness;\r\n    }\r\n    this.avgFitness = fitnessSum / this.deadPopulation.length;\r\n  }\r\n\r\n  getWorstFitness() {\r\n    let worstFitness = this.deadPopulation[0].fitness;\r\n    for (let i = 0; i < this.deadPopulation.length; i++) {\r\n      if (worstFitness < this.deadPopulation[i].fitness) this.worstFitness = this.deadPopulation[i].fitness;\r\n    }\r\n  }\r\n\r\n  calculateFitness() {\r\n    for (let player of this.deadPopulation) {\r\n      player.calcFitness();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Population;","const populationInformation = document.getElementById('populationInformation');\r\nexport const WriteGameInfo = (\r\n    generation,\r\n    population,\r\n    bestPlayer,\r\n    worstFitness,\r\n    avgFitness,\r\n    mostBallHit,\r\n    mutationRatio,\r\n    deadPopulation\r\n) => {\r\n\r\n    const {fitness} = bestPlayer;\r\n    populationInformation.innerHTML = `\r\n      <p class=\"h2\">Generation: ${generation}</p>\r\n      \r\n      <p class=\"h4\">${bestPlayer ? `Best fitness: ${fitness}` : 'No best fitness yet!'}</p>\r\n      <p class=\"h4\">${worstFitness ? `Worst fitness: ${worstFitness}` : 'No worst fitness yet!'}</h2>\r\n      <p class=\"h4\">${avgFitness ? `Average fitness per generation: ${avgFitness}` : 'No average fitness yet!'}</h2>\r\n      <p class=\"h4\">${mostBallHit ? `Most ball hit: ${mostBallHit}` : 'No best ball hit yet!'}</h2>\r\n      <p class=\"h4\">Mutation ratio: ${mutationRatio * 100}%</h2>\r\n      <p class=\"h2\">Alive population: ${population.length}</p>\r\n      <p class=\"h2\">Dead population: ${deadPopulation.length}</h2>\r\n    `;\r\n\r\n};","export const showElement = elements => {\r\n  for(let i = 0; i < elements.length; i++) {\r\n    elements[i].classList.remove('el-hide');\r\n    elements[i].classList.add('el-show');\r\n  }\r\n  return hideElements => {\r\n    for(let i = 0; i < hideElements.length; i++) {\r\n      hideElements[i].classList.remove('el-show');\r\n      hideElements[i].classList.add('el-hide');\r\n    }\r\n  }\r\n};","import Population from '../Models/Population.model';\r\nimport {Settings} from '../View/Settings.view';\r\nimport {WriteGameInfo} from '../View/GameInfo.view';\r\nimport {showElement} from '../utils/showBtn.util';\r\n\r\nconst csvButton = document.getElementById('save-csv-btn');\r\nconst startGameBtn = document.getElementById('startGame');\r\nconst pauseGameBtn = document.getElementById('pauseGameBtn');\r\nconst resumeGameBtn = document.getElementById('resumeGameBtn');\r\nconst controlButtons = document.getElementById('controlButtons');\r\n\r\nclass Game {\r\n\r\n  constructor() {\r\n    this.generation = 1;\r\n    this.populationHistory = [];\r\n    this.game = new Population();\r\n    this.gameStarted = true;\r\n    this.learningSpeed = 5;\r\n    const {canvasWidth, canvasHeight} = Settings;\r\n    this.interval = setInterval(() => {\r\n          if (!this.isPaused) {\r\n            Settings.ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n            WriteGameInfo(\r\n                this.game.generation,\r\n                this.game.population,\r\n                this.game.bestPlayer,\r\n                this.game.worstFitness,\r\n                this.game.avgFitness,\r\n                this.game.mostBallHit,\r\n                this.game.mutationRatio,\r\n                this.game.deadPopulation,\r\n            );\r\n            this.whenPopulationIsNotEmpty();\r\n            this.whenPopulationIsEmpty();\r\n          }\r\n        }, this.learningSpeed,\r\n    );\r\n  }\r\n\r\n  stop() {\r\n    this.isPaused = true;\r\n  }\r\n\r\n  resume() {\r\n    this.isPaused = false;\r\n  }\r\n\r\n  start() {\r\n    this.interval;\r\n    this.gameStarted = true;\r\n  }\r\n\r\n  whenPopulationIsNotEmpty() {\r\n    if (this.game.population) {\r\n      this.game.population.map((player, i) => {\r\n        let deathPenalty = this.game.population.length;\r\n        player.start();\r\n        if (player.dead === true) {\r\n          player.deathPenalty = deathPenalty;\r\n          this.game.population.splice(i, 1);\r\n          this.game.deadPopulation.push(player);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  whenPopulationIsEmpty() {\r\n    if (this.game.population.length === 0) {\r\n      this.game.calculateFitness();\r\n      this.game.getMaxFitness();\r\n      this.game.getWorstFitness();\r\n      this.game.getAvgFitnessPerGen();\r\n      this.game.setMostBallHit();\r\n      this.game.nextGeneration();\r\n\r\n      this.populationHistory.push({\r\n        Generation: this.game.generation,\r\n        Most_Ball_Hit: this.game.mostBallHit,\r\n        Best_Fitness: this.game.bestPlayer.fitness,\r\n        Worst_Fitness: this.game.worstFitness,\r\n        Average_Fitness: this.game.avgFitness,\r\n        Mutation_Ratio: this.game.mutationRatio,\r\n      });\r\n      if (this.populationHistory.length > 0) showElement([csvButton]);\r\n      this.game.deadPopulation = [];\r\n    }\r\n  }\r\n\r\n  getProgressTimeAndDate() {\r\n    const time = new Date();\r\n    const date = new Date();\r\n    return `${date.getFullYear()}.${date.getMonth() +\r\n    1}.${date.getDate()} ${time.getHours()}-${time.getMinutes()}-${time.getSeconds()}`;\r\n  }\r\n\r\n  saveToCsv() {\r\n    let csvRows = Object.keys(this.populationHistory[0]).join(';');\r\n    let csvCols = '';\r\n    for (let record of this.populationHistory) {\r\n      const {\r\n        Generation,\r\n        Most_Ball_Hit,\r\n        Best_Fitness,\r\n        Worst_Fitness,\r\n        Average_Fitness,\r\n        Mutation_Ratio,\r\n      } = record;\r\n      csvCols += `\\n${Generation};${Most_Ball_Hit};${Best_Fitness};${Worst_Fitness};${Average_Fitness};${Mutation_Ratio}`;\r\n    }\r\n    let csvContent = [\r\n      [csvRows],\r\n      [csvCols],\r\n    ];\r\n    const mimeType = 'text/csv;encoding:utf-8';\r\n    const a = document.createElement('a');\r\n    a.href = URL.createObjectURL((new Blob([csvContent], {\r\n      type: mimeType,\r\n    })));\r\n    a.setAttribute('download', `${this.getProgressTimeAndDate()} progress session.csv`);\r\n    a.click();\r\n  }\r\n}\r\n\r\nstartGameBtn.addEventListener('click', () => {\r\n  const game = new Game;\r\n\r\n  game.start();\r\n  controlPanel(game.gameStarted, game.populationHistory);\r\n\r\n  pauseGameBtn.addEventListener('click', () => game.stop());\r\n  resumeGameBtn.addEventListener('click', () => game.resume());\r\n  csvButton.addEventListener('click', () => game.saveToCsv());\r\n});\r\n\r\nconst controlPanel = (gameStarted) => {\r\n  if (gameStarted) showElement([controlButtons])([startGameBtn]);\r\n};\r\n\r\n"]}
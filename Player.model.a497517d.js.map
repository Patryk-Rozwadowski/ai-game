{"version":3,"sources":["View/Settings.view.js","utils/getRandomNumber.util.js","Models/Player.model.js"],"names":["canvas","document","getElementById","width","window","innerWidth","height","innerHeight","Settings","gameContainer","canvasWidth","canvasHeight","ctx","getContext","getRandomNumber","len","Math","floor","random","Player","dna","newGenes","ball","id","lifeSpan","x","creatingGenes","y","x_step","color","changeColor","dead","index","lifes","score","ballHit","fitness","distanceFromBall","deathPenalty","abs","ROOF","y_speed","ballRadius","RIGHT_WALL","x_speed","LEFT_WALL","GROUND","calcFitness","beginPath","rect","fill","closePath","fillStyle","moveTo","lineTo","strokeStyle","stroke","genes","left","right","red","green","blue","key","drawPlayer","start","player_collision","walls_collision","think"],"mappings":"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","file":"Player.model.a497517d.js","sourceRoot":"..","sourcesContent":["const canvas = document.getElementById('gameContainer');\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\nexport const Settings = {\n  gameContainer: document.getElementById('gameContainer'),\n  canvasWidth: canvas.width,\n  canvasHeight: canvas.height,\n  ctx: canvas.getContext('2d'),\n};\n","export const getRandomNumber = (len) => Math.floor(Math.random() * len);\n","import { Settings } from '../View/Settings.view';\nimport { getRandomNumber } from '../utils/getRandomNumber.util';\n\nconst { canvasWidth, canvasHeight } = Settings;\nclass Player {\n  constructor(dna, newGenes, ball) {\n    this.id = getRandomNumber(1);\n    this.lifeSpan = 2900;\n    if (newGenes) {\n      this.dna = dna;\n      this.newGenes = true;\n      this.x = 400;\n    } else {\n      this.dna = dna;\n      this.dna.creatingGenes(this.lifeSpan);\n      this.newGenes = false;\n      this.x = Math.floor(Math.random() * canvasWidth);\n    }\n\n    this.y = Settings.canvasHeight - 25;\n    this.x_step = 25;\n    this.height = 15;\n    this.width = canvasWidth / 6;\n    this.color = this.changeColor();\n\n    this.dead = false;\n    this.ball = ball;\n    this.index = 0;\n    this.lifes = 1;\n    this.score = 0;\n    this.ballHit = 0;\n    this.fitness = 0;\n    this.distanceFromBall = 0;\n    this.deathPenalty = 0;\n  }\n\n  calcFitness() {\n    this.distanceFromBall = Math.abs(this.distanceFromBall);\n    this.fitness =\n      (this.score * this.ballHit) / this.deathPenalty + this.distanceFromBall;\n  }\n\n  walls_collision() {\n    const ROOF = this.ball.y + this.ball.y_speed - this.ball.ballRadius < 0;\n    const RIGHT_WALL =\n      this.ball.x + this.ball.x_speed + this.ball.ballRadius > canvasWidth;\n    const LEFT_WALL =\n      this.ball.x + this.ball.x_speed - this.ball.ballRadius < 0;\n    const GROUND =\n      this.ball.y + this.ball.y_speed + this.ball.ballRadius > canvasHeight;\n\n    switch (true) {\n      case ROOF:\n        this.ball.y_speed = -this.ball.y_speed;\n        break;\n\n      case LEFT_WALL:\n        this.ball.x_speed = -this.ball.x_speed;\n        break;\n\n      case RIGHT_WALL:\n        this.ball.x_speed = -this.ball.x_speed;\n        break;\n\n      case GROUND:\n        this.ball.y_speed = -this.ball.y_speed;\n        this.lifes -= 1;\n        if (this.lifes === 0) {\n          this.dead = true;\n          this.calcFitness();\n        }\n    }\n  }\n\n  player_collision() {\n    if (\n      this.ball.y + this.ball.y_speed + this.ball.ballRadius >=\n        this.y + this.height &&\n      this.ball.x + this.ball.ballRadius < this.x + this.width &&\n      this.x < this.ball.x + this.ball.ballRadius\n    ) {\n      this.ball.y_speed = -this.ball.y_speed;\n      this.ballHit++;\n    }\n  }\n\n  drawPlayer() {\n    const { ctx } = Settings;\n    ctx.beginPath();\n    ctx.rect(this.x, canvasHeight - this.height, this.width, this.height);\n    ctx.fill();\n    ctx.closePath();\n    ctx.fillStyle = this.color;\n    this.ball.color = this.color;\n  }\n\n  drawBallLine() {\n    const { ctx } = Settings;\n    ctx.moveTo(this.x + this.width / 2, this.y + this.height);\n    ctx.lineTo(this.ball.x, this.ball.y);\n    ctx.strokeStyle = this.color;\n    ctx.stroke();\n  }\n\n  think() {\n    this.dna.genes[this.index] == 0 ? this.left() : this.right();\n  }\n\n  left() {\n    this.x > 0 ? (this.x -= this.x_step) : [];\n  }\n\n  right() {\n    this.x + this.width < canvasWidth ? (this.x += this.x_step) : [];\n  }\n\n  changeColor() {\n    let red = Math.floor(Math.random() * 3) * 127;\n    let green = Math.floor(Math.random() * 3) * 127;\n    let blue = Math.floor(Math.random() * 3) * 127;\n    return `rgba(${red}, ${green}, ${blue}, ${Math.random()}`;\n  }\n\n  control({ key }) {\n    switch (key) {\n      case 'a':\n        this.left();\n        break;\n\n      case 'd':\n        this.right();\n        break;\n    }\n  }\n\n  getDNA() {\n    return this.dna;\n  }\n\n  start() {\n    if (!this.newGenes) this.dna.creatingGenes(this.lifeSpan);\n    this.drawPlayer();\n    //this.drawBallLine();\n    this.ball.start();\n    this.player_collision();\n    this.walls_collision();\n    this.think();\n    this.score++;\n    this.lifeSpan--;\n    this.index++;\n  }\n}\n\nexport default Player;\n"]}
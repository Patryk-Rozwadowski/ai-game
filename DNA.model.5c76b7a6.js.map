{"version":3,"sources":["Models/DNA.model.js"],"names":["DNA","length","genes","Array","lifeSpan","i","_applyMutate","partner","child","midpoint","Math","floor","random","rate"],"mappings":";;;;;;;;;;;;;IAAaA;AACX,eAAYC,MAAZ,EAAoB;AAAA;;AAClB,QAAIA,MAAJ,EAAY;AACV,WAAKC,KAAL,GAAa,IAAIC,KAAJ,CAAUF,MAAV,CAAb;AACD,KAFD,MAEO;AACL,WAAKC,KAAL,GAAa,EAAb;AACD;AACF;;;;kCAEaE,UAAU;AACtB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAApB,EAA8BC,CAAC,EAA/B,EAAmC;AACjC,aAAKH,KAAL,CAAWG,CAAX,IAAgB,KAAKC,YAAL,EAAhB;AACD;AACF;;;8BAESC,SAAS;AACjB,UAAIC,KAAK,GAAG,IAAIR,GAAJ,CAAQ,KAAKE,KAAL,CAAWD,MAAnB,CAAZ;AACA,UAAIQ,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKV,KAAL,CAAWD,MAAtC,CAAf;;AAEA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKH,KAAL,CAAWD,MAA/B,EAAuCI,CAAC,EAAxC,EAA4C;AAC1C,YAAIA,CAAC,GAAGI,QAAR,EAAkBD,KAAK,CAACN,KAAN,CAAYG,CAAZ,IAAiB,KAAKH,KAAL,CAAWG,CAAX,CAAjB,CAAlB,KACK,IAAIA,CAAC,GAAGI,QAAR,EAAkBD,KAAK,CAACN,KAAN,CAAYG,CAAZ,IAAiBE,OAAO,CAACL,KAAR,CAAcG,CAAd,CAAjB;AACxB;;AACD,aAAOG,KAAP;AACD;;;mCAEc;AACb,aAAOE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAP;AACD;;;4BAEOC,MAAM;AACZ,WAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKH,KAAL,CAAWD,MAA/B,EAAuCI,CAAC,EAAxC,EAA4C;AAC1C,YAAIK,IAAI,CAACE,MAAL,KAAgBC,IAApB,EAA0B;AACxB,eAAKX,KAAL,CAAWG,CAAX,IAAgB,KAAKC,YAAL,EAAhB;AACD;AACF;AACF","file":"DNA.model.5c76b7a6.js","sourceRoot":"..","sourcesContent":["export class DNA {\n  constructor(length) {\n    if (length) {\n      this.genes = new Array(length);\n    } else {\n      this.genes = [];\n    }\n  }\n\n  creatingGenes(lifeSpan) {\n    for (let i = 0; i < lifeSpan; i++) {\n      this.genes[i] = this._applyMutate();\n    }\n  }\n\n  crossOver(partner) {\n    let child = new DNA(this.genes.length);\n    let midpoint = Math.floor(Math.random() * this.genes.length);\n\n    for (let i = 0; i < this.genes.length; i++) {\n      if (i > midpoint) child.genes[i] = this.genes[i];\n      else if (i < midpoint) child.genes[i] = partner.genes[i];\n    }\n    return child;\n  }\n\n  _applyMutate() {\n    return Math.floor(Math.random() * 2);\n  }\n\n  _mutate(rate) {\n    for (let i = 0; i < this.genes.length; i++) {\n      if (Math.random() < rate) {\n        this.genes[i] = this._applyMutate();\n      }\n    }\n  }\n}\n"]}
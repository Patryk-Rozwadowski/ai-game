{"version":3,"sources":["utils/getRandomNumber.util.js","Models/DNA.model.js"],"names":["getRandomNumber","len","Math","floor","random","DNA","length","genes","Array","lifeSpan","i","applyMutate","partner","child","midpoint","rate"],"mappings":";;;;;;;ACAA,ADAO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,GAAG;AAAA,SAAIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,GAA3B,CAAJ;AAAA,CAA3B;;;;;;ICEMI;AACX,eAAYC,MAAZ,EAAoB;AAAA;;AAClB,QAAIA,MAAJ,EAAY;AACV,WAAKC,KAAL,GAAa,IAAIC,KAAJ,CAAUF,MAAV,CAAb;AACD,KAFD,MAEO;AACL,WAAKC,KAAL,GAAa,EAAb;AACD;AACF;;;;kCAEaE,UAAU;AACtB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAApB,EAA8BC,CAAC,EAA/B,EAAmC;AACjC,aAAKH,KAAL,CAAWG,CAAX,IAAgB,KAAKC,WAAL,EAAhB;AACD;AACF;;;8BAESC,SAAS;AACjB,UAAIC,KAAK,GAAG,IAAIR,GAAJ,CAAQ,KAAKE,KAAL,CAAWD,MAAnB,CAAZ;AACA,UAAIQ,QAAQ,GAAG,sCAAgB,KAAKP,KAAL,CAAWD,MAA3B,CAAf;;AAEA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKH,KAAL,CAAWD,MAA/B,EAAuCI,CAAC,EAAxC,EAA4C;AAC1C,YAAIA,CAAC,GAAGI,QAAR,EAAkBD,KAAK,CAACN,KAAN,CAAYG,CAAZ,IAAiB,KAAKH,KAAL,CAAWG,CAAX,CAAjB,CAAlB,KACK,IAAIA,CAAC,GAAGI,QAAR,EAAkBD,KAAK,CAACN,KAAN,CAAYG,CAAZ,IAAiBE,OAAO,CAACL,KAAR,CAAcG,CAAd,CAAjB;AACxB;;AACD,aAAOG,KAAP;AACD;;;kCAEa;AACZ,aAAO,sCAAgB,CAAhB,CAAP;AACD;;;2BAEME,MAAM;AACX,WAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKH,KAAL,CAAWD,MAA/B,EAAuCI,CAAC,EAAxC,EAA4C;AAC1C,YAAI,sCAAgB,CAAhB,IAAqBK,IAAzB,EAA+B;AAC7B,eAAKR,KAAL,CAAWG,CAAX,IAAgB,KAAKC,WAAL,EAAhB;AACD;AACF;AACF","file":"DNA.model.5c76b7a6.js","sourceRoot":"..","sourcesContent":["export const getRandomNumber = len => Math.floor(Math.random() * len);","import {getRandomNumber} from '../utils/getRandomNumber.util';\r\n\r\nexport class DNA {\r\n  constructor(length) {\r\n    if (length) {\r\n      this.genes = new Array(length);\r\n    } else {\r\n      this.genes = [];\r\n    }\r\n  }\r\n\r\n  creatingGenes(lifeSpan) {\r\n    for (let i = 0; i < lifeSpan; i++) {\r\n      this.genes[i] = this.applyMutate();\r\n    }\r\n  }\r\n\r\n  crossOver(partner) {\r\n    let child = new DNA(this.genes.length);\r\n    let midpoint = getRandomNumber(this.genes.length);\r\n\r\n    for (let i = 0; i < this.genes.length; i++) {\r\n      if (i > midpoint) child.genes[i] = this.genes[i];\r\n      else if (i < midpoint) child.genes[i] = partner.genes[i];\r\n    }\r\n    return child;\r\n  }\r\n\r\n  applyMutate() {\r\n    return getRandomNumber(2);\r\n  }\r\n\r\n  mutate(rate) {\r\n    for (let i = 0; i < this.genes.length; i++) {\r\n      if (getRandomNumber(1) < rate) {\r\n        this.genes[i] = this.applyMutate();\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}
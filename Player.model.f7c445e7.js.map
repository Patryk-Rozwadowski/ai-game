{"version":3,"sources":["View/Settings.view.js","Models/Player.model.js"],"names":["canvas","document","getElementById","width","window","innerWidth","height","innerHeight","Settings","gameContainer","canvasWidth","canvasHeight","ctx","getContext","Player","dna","newGenes","ball","id","Math","random","lifeSpan","x","creatingGenes","floor","y","x_step","color","changeColor","dead","index","lifes","score","ballHit","fitness","distanceFromBall","deathPenalty","abs","ROOF","y_speed","ballRadius","RIGHT_WALL","x_speed","LEFT_WALL","GROUND","calcFitness","beginPath","rect","fill","closePath","fillStyle","moveTo","lineTo","strokeStyle","stroke","genes","left","right","red","green","blue","key","drawPlayer","start","player_collision","walls_collision","think"],"mappings":"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","file":"Player.model.f7c445e7.js","sourceRoot":"..","sourcesContent":["\r\nconst canvas = document.getElementById('gameContainer');\r\ncanvas.width = window.innerWidth;\r\ncanvas.height = window.innerHeight;\r\nexport const Settings = {\r\n  gameContainer: document.getElementById('gameContainer'),\r\n  canvasWidth: canvas.width,\r\n  canvasHeight: canvas.height,\r\n  ctx: canvas.getContext('2d')\r\n};","import {Settings} from '../View/Settings.view';\r\n\r\nconst {canvasWidth, canvasHeight} = Settings;\r\nclass Player {\r\n  constructor(dna, newGenes, ball) {\r\n\r\n    this.id = Math.random();\r\n    this.lifeSpan = 2900;\r\n    if (newGenes) {\r\n      this.dna = dna;\r\n      this.newGenes = true;\r\n      this.x = 400;\r\n    } else {\r\n      this.dna = dna;\r\n      this.dna.creatingGenes(this.lifeSpan);\r\n      this.newGenes = false;\r\n      this.x = Math.floor(Math.random() * canvasWidth);\r\n    }\r\n\r\n    this.y = Settings.canvasHeight - 25;\r\n    this.x_step = 15;\r\n    this.height = 15;\r\n    this.width = 180;\r\n    this.color = this.changeColor();\r\n\r\n    this.dead = false;\r\n    this.ball = ball;\r\n    this.index = 0;\r\n    this.lifes = 1;\r\n    this.score = 0;\r\n    this.ballHit = 0;\r\n    this.fitness = 0;\r\n    this.distanceFromBall = 0;\r\n    this.deathPenalty = 0;\r\n  }\r\n\r\n  calcFitness() {\r\n    this.distanceFromBall = Math.abs(this.distanceFromBall);\r\n    this.fitness = (this.score * this.ballHit) / this.deathPenalty;\r\n    // if(this.distanceFromBall > 200) this.fitness *= 0.25 ;\r\n    // if(this.distanceFromBall > 100) this.fitness *= 0.75 ;\r\n    // if(this.distanceFromBall < 50) this.fitness *= 1.25 ;\r\n    // if(this.distanceFromBall < 5) this.fitness *= 2.5;\r\n\r\n  }\r\n\r\n  walls_collision() {\r\n    const ROOF = this.ball.y + this.ball.y_speed - this.ball.ballRadius < 0;\r\n    const RIGHT_WALL = this.ball.x + this.ball.x_speed + this.ball.ballRadius > canvasWidth;\r\n    const LEFT_WALL = this.ball.x + this.ball.x_speed - this.ball.ballRadius < 0;\r\n    const GROUND = this.ball.y + this.ball.y_speed + this.ball.ballRadius > canvasHeight;\r\n\r\n    switch (true) {\r\n      case ROOF:\r\n        this.ball.y_speed = -this.ball.y_speed;\r\n        break;\r\n\r\n      case LEFT_WALL:\r\n        this.ball.x_speed = -this.ball.x_speed;\r\n        break;\r\n\r\n      case RIGHT_WALL:\r\n        this.ball.x_speed = -this.ball.x_speed;\r\n        break;\r\n\r\n      case GROUND:\r\n        this.ball.y_speed = -this.ball.y_speed;\r\n        this.lifes -= 1;\r\n        if (this.lifes === 0) {\r\n          this.dead = true;\r\n          this.calcFitness();\r\n        }\r\n    }\r\n  }\r\n\r\n  player_collision() {\r\n    if (this.ball.y + this.ball.y_speed + this.ball.ballRadius >= this.y + this.height\r\n        && this.ball.x + this.ball.ballRadius < this.x + this.width\r\n        && this.x < this.ball.x + this.ball.ballRadius) {\r\n      this.ball.y_speed = -this.ball.y_speed;\r\n      this.ballHit++;\r\n    }\r\n  }\r\n\r\n  drawPlayer() {\r\n    const {ctx} = Settings;\r\n    ctx.beginPath();\r\n    ctx.rect(this.x, canvasHeight - this.height, this.width, this.height);\r\n    ctx.fill();\r\n    ctx.closePath();\r\n    ctx.fillStyle = this.color;\r\n    this.ball.color = this.color;\r\n  }\r\n\r\n  drawBallLine() {\r\n    const {ctx} = Settings;\r\n    ctx.moveTo(this.x + this.width / 2, this.y + this.height);\r\n    ctx.lineTo(this.ball.x, this.ball.y);\r\n    ctx.strokeStyle = this.color;\r\n    ctx.stroke();\r\n  }\r\n\r\n  think() {\r\n    this.dna.genes[this.index] == 0 ? this.left() : this.right();\r\n  }\r\n\r\n  left() {\r\n    this.x > 0 ? this.x -= this.x_step : [];\r\n  }\r\n\r\n  right() {\r\n    this.x + this.width < canvasWidth ? this.x += this.x_step : [];\r\n  }\r\n\r\n  changeColor() {\r\n    let red = Math.floor(Math.random() * 3) * 127;\r\n    let green = Math.floor(Math.random() * 3) * 127;\r\n    let blue = Math.floor(Math.random() * 3) * 127;\r\n    return `rgba(${red}, ${green}, ${blue}, ${Math.random()}`;\r\n  }\r\n\r\n  control({key}) {\r\n    switch (key) {\r\n      case 'a':\r\n        this.left();\r\n        break;\r\n\r\n      case 'd':\r\n        this.right();\r\n        break;\r\n    }\r\n  }\r\n\r\n  getDNA() {\r\n    return this.dna;\r\n  }\r\n\r\n  start() {\r\n    if (!this.newGenes) this.dna.creatingGenes(this.lifeSpan);\r\n    this.drawPlayer();\r\n    //this.drawBallLine();\r\n    this.ball.start();\r\n    this.player_collision();\r\n    this.walls_collision();\r\n    this.think();\r\n    this.score++;\r\n    this.lifeSpan--;\r\n    this.index++;\r\n  }\r\n}\r\n\r\nexport default Player;"]}
{"version":3,"sources":["Models/DNA.model.js"],"names":["DNA","length","genes","Array","lifeSpan","i","applyMutate","partner","child","midpoint","Math","floor","random","rate"],"mappings":";AAoCG,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EApCUA,IAAAA,EAAAA,WACCC,SAAAA,EAAAA,GAAQ,EAAA,KAAA,GAEXC,KAAAA,MADHD,EACW,IAAIE,MAAMF,GAEV,GA+BhB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,gBA3BaG,MAAAA,SAAAA,GACP,IAAA,IAAIC,EAAI,EAAGA,EAAID,EAAUC,IACvBH,KAAAA,MAAMG,GAAK,KAAKC,gBAyBxB,CAAA,IAAA,YArBSC,MAAAA,SAAAA,GAIH,IAHDC,IAAAA,EAAQ,IAAIR,EAAI,KAAKE,MAAMD,QAC3BQ,EAAWC,KAAKC,MAAMD,KAAKE,SAAW,KAAKV,MAAMD,QAE5CI,EAAI,EAAGA,EAAI,KAAKH,MAAMD,OAAQI,IACjCA,EAAII,EAAUD,EAAMN,MAAMG,GAAK,KAAKH,MAAMG,GACrCA,EAAII,IAAUD,EAAMN,MAAMG,GAAKE,EAAQL,MAAMG,IAEjDG,OAAAA,IAaR,CAAA,IAAA,cAVa,MAAA,WACLE,OAAAA,KAAKC,MAAsB,EAAhBD,KAAKE,YASxB,CAAA,IAAA,SANMC,MAAAA,SAAAA,GACA,IAAA,IAAIR,EAAI,EAAGA,EAAI,KAAKH,MAAMD,OAAQI,IACjCK,KAAKE,SAAWC,IACbX,KAAAA,MAAMG,GAAK,KAAKC,mBAG1B,EApCUN,GAoCV,QAAA,IAAA","file":"DNA.model.d819405a.js","sourceRoot":"..","sourcesContent":["export class DNA {\r\n  constructor(length) {\r\n    if (length) {\r\n      this.genes = new Array(length);\r\n    } else {\r\n      this.genes = [];\r\n    }\r\n  }\r\n\r\n  creatingGenes(lifeSpan) {\r\n    for (let i = 0; i < lifeSpan; i++) {\r\n      this.genes[i] = this.applyMutate();\r\n    }\r\n  }\r\n\r\n  crossOver(partner) {\r\n    let child = new DNA(this.genes.length);\r\n    let midpoint = Math.floor(Math.random() * this.genes.length);\r\n\r\n    for (let i = 0; i < this.genes.length; i++) {\r\n      if (i > midpoint) child.genes[i] = this.genes[i];\r\n      else if (i < midpoint) child.genes[i] = partner.genes[i];\r\n    }\r\n    return child;\r\n  }\r\n\r\n  applyMutate() {\r\n    return Math.floor(Math.random() * 2);\r\n  }\r\n\r\n  mutate(rate) {\r\n    for (let i = 0; i < this.genes.length; i++) {\r\n      if (Math.random() < rate) {\r\n        this.genes[i] = this.applyMutate();\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}
{"version":3,"sources":["View/Settings.view.js","utils/getRandomNumber.util.js","Models/Player.model.js","Models/DNA.model.js","Models/Ball.model.js","Models/Population.model.js"],"names":["canvas","document","getElementById","width","window","innerWidth","height","innerHeight","Settings","gameContainer","canvasWidth","canvasHeight","ctx","getContext","getRandomNumber","len","Math","floor","random","Player","dna","newGenes","ball","id","lifeSpan","x","creatingGenes","y","x_step","color","changeColor","dead","index","lifes","score","ballHit","fitness","distanceFromBall","deathPenalty","abs","ROOF","y_speed","ballRadius","RIGHT_WALL","x_speed","LEFT_WALL","GROUND","calcFitness","beginPath","rect","fill","closePath","fillStyle","moveTo","lineTo","strokeStyle","stroke","genes","left","right","red","green","blue","key","drawPlayer","start","player_collision","walls_collision","think","DNA","length","Array","i","_applyMutate","partner","child","midpoint","rate","Ball","mass","arc","PI","draw","movement","Population","total","matingPool","avgFitness","bestPlayer","worstFitness","generation","mutationRatio","mostBallHit","deadPopulation","population","populationHistory","_calculateFitness","_getMaxFitness","_getWorstFitness","_getAvgFitnessPerGen","_setMostBallHit","_nextGeneration","map","player","splice","push","console","log","Generation","Most_Ball_Hit","Best_Fitness","Worst_Fitness","Average_Fitness","Mutation_Ratio","parentA","_acceptReject","parentB","parentAGenes","getDNA","parentBGenes","childDNA","crossOver","_mutate","n","j","fitnessSum","escapeLoop","r"],"mappings":"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","file":"Population.model.9a5a97f6.js","sourceRoot":"..","sourcesContent":["const canvas = document.getElementById('gameContainer');\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\nexport const Settings = {\n  gameContainer: document.getElementById('gameContainer'),\n  canvasWidth: canvas.width,\n  canvasHeight: canvas.height,\n  ctx: canvas.getContext('2d'),\n};\n","export const getRandomNumber = (len) => Math.floor(Math.random() * len);\n","import { Settings } from '../View/Settings.view';\nimport { getRandomNumber } from '../utils/getRandomNumber.util';\n\nconst { canvasWidth, canvasHeight } = Settings;\nclass Player {\n  constructor(dna, newGenes, ball) {\n    this.id = getRandomNumber(1);\n    this.lifeSpan = 2900;\n    if (newGenes) {\n      this.dna = dna;\n      this.newGenes = true;\n      this.x = 400;\n    } else {\n      this.dna = dna;\n      this.dna.creatingGenes(this.lifeSpan);\n      this.newGenes = false;\n      this.x = Math.floor(Math.random() * canvasWidth);\n    }\n\n    this.y = Settings.canvasHeight - 25;\n    this.x_step = 25;\n    this.height = 15;\n    this.width = canvasWidth / 6;\n    this.color = this.changeColor();\n\n    this.dead = false;\n    this.ball = ball;\n    this.index = 0;\n    this.lifes = 1;\n    this.score = 0;\n    this.ballHit = 0;\n    this.fitness = 0;\n    this.distanceFromBall = 0;\n    this.deathPenalty = 0;\n  }\n\n  calcFitness() {\n    this.distanceFromBall = Math.abs(this.distanceFromBall);\n    this.fitness =\n      (this.score * this.ballHit) / this.deathPenalty + this.distanceFromBall;\n  }\n\n  walls_collision() {\n    const ROOF = this.ball.y + this.ball.y_speed - this.ball.ballRadius < 0;\n    const RIGHT_WALL =\n      this.ball.x + this.ball.x_speed + this.ball.ballRadius > canvasWidth;\n    const LEFT_WALL =\n      this.ball.x + this.ball.x_speed - this.ball.ballRadius < 0;\n    const GROUND =\n      this.ball.y + this.ball.y_speed + this.ball.ballRadius > canvasHeight;\n\n    switch (true) {\n      case ROOF:\n        this.ball.y_speed = -this.ball.y_speed;\n        break;\n\n      case LEFT_WALL:\n        this.ball.x_speed = -this.ball.x_speed;\n        break;\n\n      case RIGHT_WALL:\n        this.ball.x_speed = -this.ball.x_speed;\n        break;\n\n      case GROUND:\n        this.ball.y_speed = -this.ball.y_speed;\n        this.lifes -= 1;\n        if (this.lifes === 0) {\n          this.dead = true;\n          this.calcFitness();\n        }\n    }\n  }\n\n  player_collision() {\n    if (\n      this.ball.y + this.ball.y_speed + this.ball.ballRadius >=\n        this.y + this.height &&\n      this.ball.x + this.ball.ballRadius < this.x + this.width &&\n      this.x < this.ball.x + this.ball.ballRadius\n    ) {\n      this.ball.y_speed = -this.ball.y_speed;\n      this.ballHit++;\n    }\n  }\n\n  drawPlayer() {\n    const { ctx } = Settings;\n    ctx.beginPath();\n    ctx.rect(this.x, canvasHeight - this.height, this.width, this.height);\n    ctx.fill();\n    ctx.closePath();\n    ctx.fillStyle = this.color;\n    this.ball.color = this.color;\n  }\n\n  drawBallLine() {\n    const { ctx } = Settings;\n    ctx.moveTo(this.x + this.width / 2, this.y + this.height);\n    ctx.lineTo(this.ball.x, this.ball.y);\n    ctx.strokeStyle = this.color;\n    ctx.stroke();\n  }\n\n  think() {\n    this.dna.genes[this.index] == 0 ? this.left() : this.right();\n  }\n\n  left() {\n    this.x > 0 ? (this.x -= this.x_step) : [];\n  }\n\n  right() {\n    this.x + this.width < canvasWidth ? (this.x += this.x_step) : [];\n  }\n\n  changeColor() {\n    let red = Math.floor(Math.random() * 3) * 127;\n    let green = Math.floor(Math.random() * 3) * 127;\n    let blue = Math.floor(Math.random() * 3) * 127;\n    return `rgba(${red}, ${green}, ${blue}, ${Math.random()}`;\n  }\n\n  control({ key }) {\n    switch (key) {\n      case 'a':\n        this.left();\n        break;\n\n      case 'd':\n        this.right();\n        break;\n    }\n  }\n\n  getDNA() {\n    return this.dna;\n  }\n\n  start() {\n    if (!this.newGenes) this.dna.creatingGenes(this.lifeSpan);\n    this.drawPlayer();\n    //this.drawBallLine();\n    this.ball.start();\n    this.player_collision();\n    this.walls_collision();\n    this.think();\n    this.score++;\n    this.lifeSpan--;\n    this.index++;\n  }\n}\n\nexport default Player;\n","export class DNA {\n  constructor(length) {\n    if (length) {\n      this.genes = new Array(length);\n    } else {\n      this.genes = [];\n    }\n  }\n\n  creatingGenes(lifeSpan) {\n    for (let i = 0; i < lifeSpan; i++) {\n      this.genes[i] = this._applyMutate();\n    }\n  }\n\n  crossOver(partner) {\n    let child = new DNA(this.genes.length);\n    let midpoint = Math.floor(Math.random() * this.genes.length);\n\n    for (let i = 0; i < this.genes.length; i++) {\n      if (i > midpoint) child.genes[i] = this.genes[i];\n      else if (i < midpoint) child.genes[i] = partner.genes[i];\n    }\n    return child;\n  }\n\n  _applyMutate() {\n    return Math.floor(Math.random() * 2);\n  }\n\n  _mutate(rate) {\n    for (let i = 0; i < this.genes.length; i++) {\n      if (Math.random() < rate) {\n        this.genes[i] = this._applyMutate();\n      }\n    }\n  }\n}\n","import { Settings } from '../View/Settings.view';\n\nclass Ball {\n  constructor() {\n    this.x = 500;\n    this.y = Settings.canvasHeight / 2;\n    this.x_speed = 2;\n    this.y_speed = -15;\n    this.color = '';\n    this.mass = this.ballRadius * this.ballRadius * this.ballRadius;\n    this.ballRadius = 10;\n  }\n\n  draw() {\n    const { ctx } = Settings;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.ballRadius, 0, Math.PI * 2);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  movement() {\n    this.x += this.x_speed;\n    this.y += this.y_speed;\n  }\n\n  start() {\n    this.draw();\n    this.movement();\n  }\n}\n\nexport default Ball;\n","import Player from './Player.model';\nimport { DNA } from './DNA.model';\nimport Ball from './Ball.model';\nimport { getRandomNumber } from '../utils/getRandomNumber.util';\n\nclass Population {\n  constructor() {\n    this.total = 100;\n\n    this.matingPool = [];\n    this.avgFitness = 0;\n    this.bestPlayer = { fitness: 0 };\n    this.worstFitness = 0;\n    this.generation = 1;\n    this.mutationRatio = 0.05;\n    this.mostBallHit = 0;\n\n    this.deadPopulation = [];\n    this.population = [];\n\n    this.populationHistory = [];\n    for (let i = 0; i < this.total; i++) {\n      this.population[i] = new Player(new DNA(), false, new Ball());\n    }\n  }\n\n  calculatePopulation() {\n    this._calculateFitness();\n    this._getMaxFitness();\n    this._getWorstFitness();\n    this._getAvgFitnessPerGen();\n    this._setMostBallHit();\n    this._nextGeneration();\n  }\n\n  populationLearning() {\n    if (this.population) {\n      this.population.map((player, i) => {\n        let deathPenalty = this.population.length;\n        player.start();\n        if (player.dead === true) {\n          player.deathPenalty = deathPenalty;\n          this.population.splice(i, 1);\n          this.deadPopulation.push(player);\n        }\n      });\n    }\n  }\n\n  fillHistory() {\n    console.log(this.populationHistory);\n    this.populationHistory.push({\n      Generation: this.generation,\n      Most_Ball_Hit: this.mostBallHit,\n      Best_Fitness: this.bestPlayer.fitness,\n      Worst_Fitness: this.worstFitness,\n      Average_Fitness: this.avgFitness,\n      Mutation_Ratio: this.mutationRatio,\n    });\n  }\n\n  _nextGeneration() {\n    console.log('Next generation');\n    this.generation++;\n    for (let i = 0; i < this.total; i++) {\n      let parentA = this._acceptReject();\n      let parentB = this._acceptReject();\n      if (!parentA) parentA = this.deadPopulation[getRandomNumber(this.total)];\n      if (!parentB) parentB = this.deadPopulation[getRandomNumber(this.total)];\n      const parentAGenes = parentA.getDNA();\n      const parentBGenes = parentB.getDNA();\n\n      const childDNA = parentAGenes.crossOver(parentBGenes);\n      childDNA._mutate(this.mutationRatio);\n      this.population[i] = new Player(childDNA, true, new Ball());\n    }\n  }\n\n  pickMatingPool() {\n    this.matingPool = [];\n    for (let i = 0; i < this.total; i++) {\n      let n = this.deadPopulation[i].fitness;\n      for (let j = 0; j < n; j++) {\n        this.matingPool.push(this.deadPopulation[j]);\n      }\n    }\n  }\n\n  _getMaxFitness() {\n    for (let player of this.deadPopulation) {\n      if (player.fitness > this.bestPlayer.fitness) {\n        this.bestPlayer = player;\n      }\n    }\n  }\n\n  _getAvgFitnessPerGen() {\n    let fitnessSum = 0;\n    for (let i = 0; i < this.deadPopulation.length; i++) {\n      fitnessSum += this.deadPopulation[i].fitness;\n    }\n    this.avgFitness = fitnessSum / this.deadPopulation.length;\n  }\n\n  _getWorstFitness() {\n    let worstFitness = 0;\n\n    for (let i = 0; i < this.deadPopulation.length; i++) {\n      if (worstFitness < this.deadPopulation[i].fitness)\n        this.worstFitness = this.deadPopulation[i].fitness;\n    }\n  }\n\n  _calculateFitness() {\n    for (let player of this.deadPopulation) {\n      player.calcFitness();\n    }\n  }\n\n  _acceptReject() {\n    let escapeLoop = 0;\n    while (true) {\n      const partner = this.deadPopulation[getRandomNumber(this.total)];\n      const r = Math.floor(Math.random() * this.bestPlayer.fitness);\n      if (r < partner.fitness) {\n        return partner;\n      }\n      escapeLoop++;\n      if (escapeLoop > 5000) {\n        return;\n      }\n    }\n  }\n\n  _setMostBallHit() {\n    for (let player of this.deadPopulation) {\n      if (player.ballHit > this.mostBallHit) {\n        this.mostBallHit = player.ballHit;\n      }\n    }\n  }\n}\n\nexport default Population;\n"]}
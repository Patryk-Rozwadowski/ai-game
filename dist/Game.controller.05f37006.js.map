{"version":3,"sources":["View/Settings.view.js","Models/Player.model.js","Models/DNA.model.js","Models/Ball.model.js","Models/Population.model.js","View/GameInfo.view.js","Controller/Game.controller.js"],"names":["canvas","document","getElementById","width","window","innerWidth","height","innerHeight","Settings","gameContainer","canvasWidth","canvasHeight","ctx","getContext","Player","dna","newGenes","ball","id","Math","random","lifeSpan","x","creatingGenes","floor","y","x_step","color","changeColor","dead","index","lifes","score","ballHit","fitness","distanceFromBall","deathPenalty","abs","ROOF","y_speed","ballRadius","RIGHT_WALL","x_speed","LEFT_WALL","GROUND","calcFitness","beginPath","rect","fill","closePath","fillStyle","moveTo","lineTo","strokeStyle","stroke","genes","left","right","red","green","blue","key","drawPlayer","start","player_collision","walls_collision","think","DNA","length","Array","i","partner","child","midpoint","rate","applyMutate","Ball","mass","arc","PI","draw","movement","Population","total","matingPool","avgFitness","bestPlayer","worstFitness","generation","mutationRatio","mostBallHit","deadPopulation","population","player","console","log","parentA","acceptReject","parentB","parentAGenes","getDNA","parentBGenes","childDNA","crossOver","mutate","n","j","push","escapeLoop","r","fitnessSum","populationInformation","WriteGameInfo","innerHTML","csvButton","startGameBtn","pauseGameBtn","resumeGameBtn","controlButtons","Game","history","game","gameStarted","learningSpeed","interval","setInterval","isPaused","clearRect","whenPopulationIsNotEmpty","whenPopulationIsEmpty","map","splice","calculateFitness","getMaxFitness","getWorstFitness","getAvgFitnessPerGen","setMostBallHit","nextGeneration","Generation","Most_Ball_Hit","Best_Fitness","Worst_Fitness","Average_Fitness","Mutation_Ratio","time","Date","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","csvRows","Object","keys","join","csvCols","record","csvContent","a","createElement","href","URL","createObjectURL","Blob","type","setAttribute","getProgressTimeAndDate","click","addEventListener","controlPanel","saveToCsv","stop","resume","style","display"],"mappings":"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","file":"Game.controller.05f37006.js","sourceRoot":"..","sourcesContent":["\r\nconst canvas = document.getElementById('gameContainer');\r\ncanvas.width = window.innerWidth;\r\ncanvas.height = window.innerHeight;\r\nexport const Settings = {\r\n  gameContainer: document.getElementById('gameContainer'),\r\n  canvasWidth: canvas.width,\r\n  canvasHeight: canvas.height,\r\n  ctx: canvas.getContext('2d')\r\n};","import {Settings} from '../View/Settings.view';\r\n\r\nconst {canvasWidth, canvasHeight} = Settings;\r\nclass Player {\r\n  constructor(dna, newGenes, ball) {\r\n\r\n    this.id = Math.random();\r\n    this.lifeSpan = 2900;\r\n    if (newGenes) {\r\n      this.dna = dna;\r\n      this.newGenes = true;\r\n      this.x = 400;\r\n    } else {\r\n      this.dna = dna;\r\n      this.dna.creatingGenes(this.lifeSpan);\r\n      this.newGenes = false;\r\n      this.x = Math.floor(Math.random() * canvasWidth);\r\n    }\r\n\r\n    this.y = Settings.canvasHeight - 25;\r\n    this.x_step = 15;\r\n    this.height = 15;\r\n    this.width = 180;\r\n    this.color = this.changeColor();\r\n\r\n    this.dead = false;\r\n    this.ball = ball;\r\n    this.index = 0;\r\n    this.lifes = 1;\r\n    this.score = 0;\r\n    this.ballHit = 0;\r\n    this.fitness = 0;\r\n    this.distanceFromBall = 0;\r\n    this.deathPenalty = 0;\r\n  }\r\n\r\n  calcFitness() {\r\n    this.distanceFromBall = Math.abs(this.distanceFromBall);\r\n    this.fitness = (this.score * this.ballHit) / this.deathPenalty;\r\n    // if(this.distanceFromBall > 200) this.fitness *= 0.25 ;\r\n    // if(this.distanceFromBall > 100) this.fitness *= 0.75 ;\r\n    // if(this.distanceFromBall < 50) this.fitness *= 1.25 ;\r\n    // if(this.distanceFromBall < 5) this.fitness *= 2.5;\r\n\r\n  }\r\n\r\n  walls_collision() {\r\n    const ROOF = this.ball.y + this.ball.y_speed - this.ball.ballRadius < 0;\r\n    const RIGHT_WALL = this.ball.x + this.ball.x_speed + this.ball.ballRadius > canvasWidth;\r\n    const LEFT_WALL = this.ball.x + this.ball.x_speed - this.ball.ballRadius < 0;\r\n    const GROUND = this.ball.y + this.ball.y_speed + this.ball.ballRadius > canvasHeight;\r\n\r\n    switch (true) {\r\n      case ROOF:\r\n        this.ball.y_speed = -this.ball.y_speed;\r\n        break;\r\n\r\n      case LEFT_WALL:\r\n        this.ball.x_speed = -this.ball.x_speed;\r\n        break;\r\n\r\n      case RIGHT_WALL:\r\n        this.ball.x_speed = -this.ball.x_speed;\r\n        break;\r\n\r\n      case GROUND:\r\n        this.ball.y_speed = -this.ball.y_speed;\r\n        this.lifes -= 1;\r\n        if (this.lifes === 0) {\r\n          this.dead = true;\r\n          this.calcFitness();\r\n        }\r\n    }\r\n  }\r\n\r\n  player_collision() {\r\n    if (this.ball.y + this.ball.y_speed + this.ball.ballRadius >= this.y + this.height\r\n        && this.ball.x + this.ball.ballRadius < this.x + this.width\r\n        && this.x < this.ball.x + this.ball.ballRadius) {\r\n      this.ball.y_speed = -this.ball.y_speed;\r\n      this.ballHit++;\r\n    }\r\n  }\r\n\r\n  drawPlayer() {\r\n    const {ctx} = Settings;\r\n    ctx.beginPath();\r\n    ctx.rect(this.x, canvasHeight - this.height, this.width, this.height);\r\n    ctx.fill();\r\n    ctx.closePath();\r\n    ctx.fillStyle = this.color;\r\n    this.ball.color = this.color;\r\n  }\r\n\r\n  drawBallLine() {\r\n    const {ctx} = Settings;\r\n    ctx.moveTo(this.x + this.width / 2, this.y + this.height);\r\n    ctx.lineTo(this.ball.x, this.ball.y);\r\n    ctx.strokeStyle = this.color;\r\n    ctx.stroke();\r\n  }\r\n\r\n  think() {\r\n    this.dna.genes[this.index] == 0 ? this.left() : this.right();\r\n  }\r\n\r\n  left() {\r\n    this.x > 0 ? this.x -= this.x_step : [];\r\n  }\r\n\r\n  right() {\r\n    this.x + this.width < canvasWidth ? this.x += this.x_step : [];\r\n  }\r\n\r\n  changeColor() {\r\n    let red = Math.floor(Math.random() * 3) * 127;\r\n    let green = Math.floor(Math.random() * 3) * 127;\r\n    let blue = Math.floor(Math.random() * 3) * 127;\r\n    return `rgba(${red}, ${green}, ${blue}, ${Math.random()}`;\r\n  }\r\n\r\n  control({key}) {\r\n    switch (key) {\r\n      case 'a':\r\n        this.left();\r\n        break;\r\n\r\n      case 'd':\r\n        this.right();\r\n        break;\r\n    }\r\n  }\r\n\r\n  getDNA() {\r\n    return this.dna;\r\n  }\r\n\r\n  start() {\r\n    if (!this.newGenes) this.dna.creatingGenes(this.lifeSpan);\r\n    this.drawPlayer();\r\n    //this.drawBallLine();\r\n    this.ball.start();\r\n    this.player_collision();\r\n    this.walls_collision();\r\n    this.think();\r\n    this.score++;\r\n    this.lifeSpan--;\r\n    this.index++;\r\n  }\r\n}\r\n\r\nexport default Player;","export class DNA {\r\n  constructor(length) {\r\n    if (length) {\r\n      this.genes = new Array(length);\r\n    } else {\r\n      this.genes = [];\r\n    }\r\n  }\r\n\r\n  creatingGenes(lifeSpan) {\r\n    for (let i = 0; i < lifeSpan; i++) {\r\n      this.genes[i] = Math.floor(Math.random() * 2);\r\n    }\r\n  }\r\n\r\n  crossOver(partner) {\r\n    let child = new DNA(this.genes.length);\r\n    let midpoint = Math.floor(Math.random() * this.genes.length);\r\n\r\n    for (let i = 0; i < this.genes.length; i++) {\r\n      if (i > midpoint) child.genes[i] = this.genes[i];\r\n      else if (i < midpoint) child.genes[i] = partner.genes[i];\r\n    }\r\n    return child;\r\n  }\r\n\r\n  applyMutate() {\r\n    return Math.floor(Math.random() * 2);\r\n  }\r\n\r\n  mutate(rate) {\r\n    for (let i = 0; i < this.genes.length; i++) {\r\n      if (Math.random() < rate) {\r\n        this.genes[i] = this.applyMutate();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {Settings} from '../View/Settings.view';\r\n\r\nclass Ball {\r\n  constructor() {\r\n    this.x = 500;\r\n    this.y = Settings.canvasHeight / 2;\r\n    this.x_speed = 2;\r\n    this.y_speed = -15;\r\n    this.color = '';\r\n    this.mass = this.ballRadius * this.ballRadius * this.ballRadius;\r\n    this.ballRadius = 10;\r\n  }\r\n\r\n  draw() {\r\n    const {ctx} = Settings;\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y, this.ballRadius, 0, Math.PI * 2);\r\n    ctx.fillStyle = this.color;\r\n    ctx.fill();\r\n    ctx.closePath();\r\n  }\r\n\r\n  movement() {\r\n    this.x += this.x_speed;\r\n    this.y += this.y_speed;\r\n  }\r\n\r\n  start() {\r\n    this.draw();\r\n    this.movement();\r\n  }\r\n}\r\n\r\nexport default Ball;","import Player from './Player.model';\r\nimport {DNA} from './DNA.model';\r\nimport Ball from './Ball.model';\r\n\r\nclass Population {\r\n  constructor() {\r\n    this.total = 100;\r\n\r\n    this.matingPool = [];\r\n    this.avgFitness = 0;\r\n    this.bestPlayer = {fitness: 0};\r\n    this.worstFitness = 0;\r\n    this.generation = 1;\r\n    this.mutationRatio = 0.05;\r\n    this.mostBallHit = 0;\r\n\r\n    this.deadPopulation = [];\r\n    this.population = [];\r\n    for (let i = 0; i < this.total; i++) {\r\n      this.population[i] = new Player(new DNA(), false, new Ball());\r\n    }\r\n  }\r\n\r\n  setMostBallHit() {\r\n    for (let player of this.deadPopulation) {\r\n      if (player.ballHit > this.mostBallHit) {\r\n        this.mostBallHit = player.ballHit;\r\n      }\r\n    }\r\n  }\r\n\r\n  nextGeneration() {\r\n    console.log('Next generation');\r\n    this.generation++;\r\n    for (let i = 0; i < this.total; i++) {\r\n      const parentA = this.acceptReject();\r\n      const parentB = this.acceptReject();\r\n\r\n      const parentAGenes = parentA.getDNA();\r\n      const parentBGenes = parentB.getDNA();\r\n\r\n      const childDNA = parentAGenes.crossOver(parentBGenes);\r\n      childDNA.mutate(this.mutationRatio);\r\n      this.population[i] = new Player(childDNA, true, new Ball());\r\n    }\r\n  }\r\n\r\n  pickMatingPool() {\r\n    this.matingPool = [];\r\n    for (let i = 0; i < this.total; i++) {\r\n      let n = this.deadPopulation[i].fitness;\r\n      for (let j = 0; j < n; j++) {\r\n        this.matingPool.push(this.deadPopulation[j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  acceptReject() {\r\n    let escapeLoop = 0;\r\n    while (true) {\r\n      const index = Math.floor(Math.random() * this.total);\r\n      const partner = this.deadPopulation[index];\r\n      const r = Math.floor(Math.random() * this.bestPlayer.fitness);\r\n      if (r < partner.fitness) {\r\n        return partner;\r\n      }\r\n      escapeLoop++;\r\n      if (escapeLoop > 5000) { return;}\r\n    }\r\n  }\r\n\r\n  getMaxFitness() {\r\n    for (let player of this.deadPopulation) {\r\n      if (player.fitness > this.bestPlayer.fitness) {\r\n        this.bestPlayer = player;\r\n      }\r\n    }\r\n  }\r\n\r\n  getAvgFitnessPerGen() {\r\n    let fitnessSum = 0;\r\n    for(let i = 0; i < this.deadPopulation.length; i++) {\r\n      fitnessSum += this.deadPopulation[i].fitness;\r\n    }\r\n    this.avgFitness = fitnessSum / this.deadPopulation.length;\r\n  }\r\n\r\n  getWorstFitness() {\r\n    let worstFitness = this.deadPopulation[0].fitness;\r\n    for (let i = 0; i < this.deadPopulation.length; i++) {\r\n      if (worstFitness < this.deadPopulation[i].fitness) this.worstFitness = this.deadPopulation[i].fitness;\r\n    }\r\n  }\r\n\r\n  calculateFitness() {\r\n    for (let player of this.deadPopulation) {\r\n      player.calcFitness();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Population;","const populationInformation = document.getElementById('populationInformation');\r\nexport const WriteGameInfo = (\r\n    generation,\r\n    population,\r\n    bestPlayer,\r\n    worstFitness,\r\n    avgFitness,\r\n    mostBallHit,\r\n    mutationRatio,\r\n    deadPopulation\r\n) => {\r\n\r\n    const {fitness} = bestPlayer;\r\n    populationInformation.innerHTML = `\r\n      <p class=\"h2\">Generations: ${generation}</p>\r\n      <p class=\"h2\">Alive population: ${population.length}</p>\r\n      <p class=\"h2\">${bestPlayer ? `Best fitness: ${fitness}` : 'No best fitness yet!'}</p>\r\n      <p class=\"h2\">${worstFitness ? `Worst fitness: ${worstFitness}` : 'No worst fitness yet!'}</h2>\r\n      <p class=\"h2\">${avgFitness ? `Average fitness per generation: ${avgFitness}` : 'No average fitness yet!'}</h2>\r\n      <p class=\"h2\">${mostBallHit ? `Most ball hit: ${mostBallHit}` : 'No best ball hit yet!'}</h2>\r\n      <p class=\"h2\">Mutation ratio: ${mutationRatio * 100}%</h2>\r\n      <p class=\"h1\">Dead players: ${deadPopulation.length}</h2>\r\n    `;\r\n\r\n};","import Population from '../Models/Population.model';\r\nimport {Settings} from '../View/Settings.view';\r\nimport {WriteGameInfo} from '../View/GameInfo.view';\r\n\r\nconst csvButton = document.getElementById('save-csv-btn');\r\nconst startGameBtn = document.getElementById('startGame');\r\nconst pauseGameBtn = document.getElementById('pauseGameBtn');\r\nconst resumeGameBtn = document.getElementById('resumeGameBtn');\r\nconst controlButtons = document.getElementById('controlButtons');\r\n\r\nclass Game {\r\n\r\n  constructor() {\r\n    this.generation = 1;\r\n    this.history = [];\r\n    this.game = new Population();\r\n    this.gameStarted = true;\r\n    this.learningSpeed = 5;\r\n    const {canvasWidth, canvasHeight} = Settings;\r\n    this.interval = setInterval(() => {\r\n          if (!this.isPaused) {\r\n            Settings.ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n            WriteGameInfo(\r\n                this.game.generation,\r\n                this.game.population,\r\n                this.game.bestPlayer,\r\n                this.game.worstFitness,\r\n                this.game.avgFitness,\r\n                this.game.mostBallHit,\r\n                this.game.mutationRatio,\r\n                this.game.deadPopulation,\r\n            );\r\n            this.whenPopulationIsNotEmpty();\r\n            this.whenPopulationIsEmpty();\r\n          }\r\n        }, this.learningSpeed,\r\n    );\r\n  }\r\n\r\n  stop() {\r\n    this.isPaused = true;\r\n  }\r\n\r\n  resume() {\r\n    this.isPaused = false;\r\n  }\r\n\r\n  start() {\r\n    this.interval;\r\n    this.gameStarted = true;\r\n  }\r\n\r\n  whenPopulationIsNotEmpty() {\r\n    if (this.game.population) {\r\n      this.game.population.map((player, i) => {\r\n        let deathPenalty = this.game.population.length;\r\n        player.start();\r\n        if (player.dead === true) {\r\n          player.deathPenalty = deathPenalty;\r\n          this.game.population.splice(i, 1);\r\n          this.game.deadPopulation.push(player);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  whenPopulationIsEmpty() {\r\n    if (this.game.population.length === 0) {\r\n      this.game.calculateFitness();\r\n      this.game.getMaxFitness();\r\n      this.game.getWorstFitness();\r\n      this.game.getAvgFitnessPerGen();\r\n      this.game.setMostBallHit();\r\n      this.game.nextGeneration();\r\n\r\n      this.history.push({\r\n        Generation: this.game.generation,\r\n        Most_Ball_Hit: this.game.mostBallHit,\r\n        Best_Fitness: this.game.bestPlayer.fitness,\r\n        Worst_Fitness: this.game.worstFitness,\r\n        Average_Fitness: this.game.avgFitness,\r\n        Mutation_Ratio: this.game.mutationRatio,\r\n      });\r\n      this.game.deadPopulation = [];\r\n    }\r\n  }\r\n\r\n  getProgressTimeAndDate() {\r\n    const time = new Date();\r\n    const date = new Date();\r\n    const {\r\n      getFullYear,\r\n      getMonth,\r\n      getDate,\r\n    } = date;\r\n    const {\r\n      getHours,\r\n      getMinutes,\r\n      getSeconds,\r\n    } = time;\r\n    return `${getFullYear()}.${getMonth() + 1}.${getDate()} ${getHours()}-${getMinutes()}-${getSeconds()}`;\r\n  }\r\n\r\n  saveToCsv() {\r\n    let csvRows = Object.keys(this.history[0]).join(';');\r\n    let csvCols = '';\r\n    for (let record of this.history) {\r\n      const {\r\n        Generation,\r\n        Most_Ball_Hit,\r\n        Best_Fitness,\r\n        Worst_Fitness,\r\n        Average_Fitness,\r\n        Mutation_Ratio,\r\n      } = record;\r\n      csvCols += `\\n${Generation};${Most_Ball_Hit};${Best_Fitness};${Worst_Fitness};${Average_Fitness};${Mutation_Ratio}`;\r\n    }\r\n    let csvContent = [\r\n      [csvRows],\r\n      [csvCols],\r\n    ];\r\n    const mimeType = 'text/csv;encoding:utf-8';\r\n    const a = document.createElement('a');\r\n    a.href = URL.createObjectURL((new Blob([csvContent], {\r\n      type: mimeType,\r\n    })));\r\n    a.setAttribute('download', `${this.getProgressTimeAndDate()} progress session.csv`);\r\n    a.click();\r\n  }\r\n}\r\n\r\nstartGameBtn.addEventListener('click', () => {\r\n  const game = new Game;\r\n\r\n  game.start();\r\n  controlPanel(game.gameStarted);\r\n\r\n  csvButton.addEventListener('click', () => game.saveToCsv());\r\n  pauseGameBtn.addEventListener('click', () => game.stop());\r\n  resumeGameBtn.addEventListener('click', () => game.resume());\r\n});\r\n\r\nconst controlPanel = (gameStarted) => {\r\n  if (gameStarted) {\r\n    controlButtons.style.display = 'block';\r\n    startGameBtn.style.display = 'none';\r\n  }\r\n};\r\n\r\n"]}